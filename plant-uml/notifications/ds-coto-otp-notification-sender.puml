@startuml
actor User
participant "API Gateway" as APIG
participant "Lambda: lam_coto_prepare_notifications" as PrepareLambda
database "RDS Database" as RDS
queue "SQS: sqs_notifications_queue" as SQS
queue "SQS: sqs_coto_audit-event-bus" as AuditSQS
participant "Lambda: lam_coto_audit_event" as AuditLambda
database "Audit Table" as Aurora
participant "Lambda: lam_coto_email_notification" as EmailLambda
database "S3: coto_html_templates" as S3
participant "SNS: EmailNotificationsTopic" as SNS
participant "CloudWatch: View Logs" as CloudWatch

User -> APIG: POST /users/emails\n(JSON Body)
APIG -> PrepareLambda: Invoke Lambda

alt type == "otp-generator"
    PrepareLambda -> RDS: getOTPInfoByUser
    PrepareLambda -> PrepareLambda: Does the user have active OTPs?
    alt Active OTPs? == YES
    PrepareLambda -> PrepareLambda: Deactivate OTP
    PrepareLambda -> PrepareLambda: generateOTPByUser
    else Active OTPs? == NO
    PrepareLambda -> PrepareLambda: generateOTPByUser
    end
    PrepareLambda -> RDS: getUserEmailById
    PrepareLambda -> RDS: saveOTPByUser
end

PrepareLambda -> AuditSQS: Audit action logs
AuditSQS <- AuditLambda: Persist audit information [Get Data by Subscription]
AuditLambda -> Aurora: Persist audit information
PrepareLambda -> SQS: Publish message to sqs_notifications_queue Topic [sqs-email-notifications-topic]

EmailLambda -> SQS: Get email notification [Subscription Topic: sqs-email-notifications-topic]
EmailLambda -> S3: Retrieve HTML Template from S3
EmailLambda -> EmailLambda: Customize Email Message
EmailLambda -> SNS: Publish message to EmailNotificationsTopic\nfor email delivery [Topic: sns-email-notifications-topic]
EmailLambda <- SNS: Message received from sns-email-notifications-topic
SNS -> CloudWatch: Register events about\nsent notifications
User -> CloudWatch: View Logs [Sent/Failed] notifications
@enduml